{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/loading.ts","features/todos.ts","app/store.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["currentTodoActions","todo","type","payload","currentTodoReducer","state","action","filterActions","queryText","SortType","initialState","query","status","filterReducer","loaderActions","loadingReducer","todosActions","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","loading","store","createStore","composeWithDevTools","applyMiddleware","thunk","TodoList","dispatch","useDispatch","currTodos","useSelector","currentFilter","currTodo","todosByStatus","useMemo","completed","todosPrepared","title","toLowerCase","includes","length","className","map","id","onClick","setSelectedTodo","TodoFilter","onSubmit","event","preventDefault","onChange","value","currentSortType","changeSortHandler","target","placeholder","text","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","TodoModal","useState","user","setUser","useEffect","userId","currUser","undefined","href","email","name","App","finally","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9fa26989.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const currentTodoActions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n    case 'currentTodo/REMOVE':\n      return null;\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\nconst setQuery = (queryText: string) => ({\n  type: 'SET_QUERY',\n  payload: queryText,\n});\n\nconst setSortType = (SortType: SortType) => ({\n  type: SortType,\n});\n\nexport const filterActions = { setQuery, setSortType };\n\nexport type FilterState = {\n  query: string,\n  status: Status,\n};\n\nexport type SortType = 'SET_ACTIVE' | 'SET_COMPLETED' | 'SET_ALL';\n\ntype Action = {\n  type: SortType | 'SET_QUERY',\n  payload: string,\n\n};\n\nconst initialState: FilterState = {\n  query: '',\n  status: 'all',\n};\n\nconst filterReducer = (state: FilterState = initialState, action: Action) => {\n  switch (action.type) {\n    case 'SET_ACTIVE':\n      return {\n        ...state,\n        status: 'active',\n      };\n    case 'SET_COMPLETED':\n      return {\n        ...state,\n        status: 'completed',\n      };\n    case 'SET_ALL':\n      return {\n        ...state,\n        status: 'all',\n      };\n    case 'SET_QUERY':\n      return {\n        ...state,\n        query: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","type SetLoading = {\n  type: 'SET_TODOS_LOADING',\n  payload: boolean,\n};\n\ntype RemoveLoading = {\n  type: 'REMOVE_TODOS_LOADING',\n  payload: boolean,\n};\n\ntype Action = (SetLoading | RemoveLoading);\n\nconst setLoading = ():SetLoading => (\n  { type: 'SET_TODOS_LOADING', payload: true });\n\nconst removeLoading = ():RemoveLoading => (\n  { type: 'REMOVE_TODOS_LOADING', payload: false });\n\nexport const loaderActions = (\n  {\n    setLoading,\n    removeLoading,\n  }\n);\n\nconst initialState = true;\n\nconst loadingReducer = (\n  state = initialState,\n  action: Action,\n) => {\n  switch (action.type) {\n    case 'SET_TODOS_LOADING':\n      return true;\n    case 'REMOVE_TODOS_LOADING':\n      return false;\n    default:\n      return state;\n  }\n};\n\nexport default loadingReducer;\n","import type { RootState } from '../app/store';\nimport { Todo } from '../types/Todo';\n\ntype Action = {\n  type: 'SET_TODOS' | 'REMOVE_TODOS'\n  payload: Todo[],\n};\n\ntype State = Todo[] | null;\n\nconst removeTodos = () => ({ type: 'REMOVE_TODOS' });\n\nconst setTodo = (todos: Todo[]) => ({\n  type: 'SET_TODOS',\n  payload: todos,\n});\n\nexport const todosActions = { setTodo, removeTodos };\n\nexport const PREPARED_TODOS = (state: RootState) => {\n  const { todos, filter } = state;\n  const { query, status } = filter;\n\n  if (todos) {\n    let preparedTodos: Todo[] = [];\n\n    switch (status) {\n      case 'active':\n        preparedTodos = todos.filter((todo:Todo) => !todo.completed);\n        break;\n      case 'completed':\n        preparedTodos = todos.filter((todo:Todo) => todo.completed);\n        break;\n      default:\n        preparedTodos = todos;\n    }\n\n    return preparedTodos.filter(todo => (\n      todo.title.toLowerCase().includes(query)));\n  }\n\n  return [];\n};\n\nconst todosReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'SET_TODOS':\n      return action.payload;\n    case 'REMOVE_TODOS':\n      return null;\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport loadingReducer from '../features/loading';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n  loading: loadingReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","/* eslint-disable max-len */\nimport React, { useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from '../../app/store';\nimport { currentTodoActions } from '../../features/currentTodo';\nimport { FilterState } from '../../features/filter';\nimport { Todo } from '../../types/Todo';\n\nexport const TodoList: React.FC = () => {\n  const dispatch = useDispatch();\n  const currTodos = useSelector((state: RootState) => state.todos);\n  const currentFilter: FilterState = useSelector((state: RootState) => state.filter);\n  const currTodo = useSelector((state: RootState) => state.currentTodo);\n\n  const todosByStatus = useMemo(() => {\n    if (currTodos) {\n      switch (currentFilter.status) {\n        case 'active':\n          return currTodos.filter(todo => !todo.completed);\n        case 'completed':\n          return currTodos.filter(todo => todo.completed);\n        default:\n          return currTodos;\n      }\n    }\n\n    return [];\n  }, [currTodos, currentFilter.status]);\n\n  const todosPrepared = useMemo(() => (\n    todosByStatus.filter(todo => todo.title.toLowerCase().includes(currentFilter.query))\n  ), [todosByStatus, currentFilter.query]);\n\n  const setSelectedTodo = (todo: Todo) => {\n    dispatch(currentTodoActions.setTodo(todo));\n  };\n\n  return (\n    currTodos && currTodos.length > 0\n      ? (\n        <table className=\"table is-narrow is-fullwidth\">\n          <thead>\n            <tr>\n              <th>#</th>\n\n              <th>\n                <span className=\"icon\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </th>\n\n              <th>Title</th>\n              <th> </th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {todosPrepared.map(todo => (\n              <tr\n                data-cy=\"todo\"\n                className={currTodo && currTodo.id === todo.id\n                  ? 'has-background-info-light'\n                  : ''}\n                key={todo.id}\n              >\n                <td className=\"is-vcentered\">{todo.id}</td>\n                <td className=\"is-vcentered\">\n                  {todo.completed && (\n                    <span className=\"icon\" data-cy=\"iconCompleted\">\n                      <i className=\"fas fa-check\" />\n                    </span>\n                  )}\n                </td>\n                <td className=\"is-vcentered is-expanded\">\n                  <p\n                    className={`has-text-${todo.completed ? 'success' : 'danger'}`}\n                  >\n                    {todo.title}\n                  </p>\n                </td>\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    data-cy=\"selectButton\"\n                    className=\"button\"\n                    type=\"button\"\n                    onClick={() => setSelectedTodo(todo)}\n                  >\n                    <span className=\"icon\">\n                      <i\n                        className={`far fa-eye${currTodo && currTodo.id === todo.id\n                          ? '-slash'\n                          : ''}`}\n                      />\n                    </span>\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      ) : (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      )\n  );\n};\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from '../../app/store';\nimport { filterActions, FilterState, SortType } from '../../features/filter';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useDispatch();\n  const currentFilter: FilterState = useSelector(\n    (state: RootState) => state.filter,\n  );\n\n  const changeQueryHandler = (text: string) => {\n    dispatch(filterActions.setQuery(text));\n  };\n\n  const changeSortHandler = (value:string) => {\n    let currentSortType: SortType = 'SET_ALL';\n\n    switch (value) {\n      case 'active':\n        currentSortType = 'SET_ACTIVE';\n        break;\n      case 'completed':\n        currentSortType = 'SET_COMPLETED';\n        break;\n      default:\n        currentSortType = 'SET_ALL';\n    }\n\n    dispatch(filterActions.setSortType(currentSortType));\n  };\n\n  const clearQueryHandler = () => {\n    dispatch(filterActions.setQuery(''));\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={(event) => (changeSortHandler(event.target.value))}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={currentFilter.query}\n          onChange={(event) => (\n            changeQueryHandler(event.target.value.toLowerCase()))}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {currentFilter.query.length > 0 && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => clearQueryHandler()}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getUser } from '../../api';\nimport { RootState } from '../../app/store';\nimport { currentTodoActions } from '../../features/currentTodo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\nexport const TodoModal: React.FC = () => {\n  const dispatch = useDispatch();\n  const currTodo = useSelector((state: RootState) => state.currentTodo);\n  const [user, setUser] = useState<User>();\n\n  const closeTodo = () => {\n    setUser(undefined);\n    dispatch(currentTodoActions.removeTodo());\n  };\n\n  useEffect(() => {\n    if (currTodo) {\n      getUser(currTodo.userId)\n        .then((currUser: User) => setUser(currUser));\n    }\n  }, []);\n\n  return (\n    currTodo\n      ? (\n        <div className=\"modal is-active\" data-cy=\"modal\">\n          <div className=\"modal-background\" />\n\n          {!user ? (\n            <Loader />\n          ) : (\n            <div className=\"modal-card\">\n              <header className=\"modal-card-head\">\n                <div\n                  className=\"modal-card-title has-text-weight-medium\"\n                  data-cy=\"modal-header\"\n                >\n                  Todo #\n                  {currTodo.id}\n                </div>\n\n                {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n                <button\n                  type=\"button\"\n                  className=\"delete\"\n                  data-cy=\"modal-close\"\n                  onClick={() => (closeTodo())}\n                />\n              </header>\n\n              <div className=\"modal-card-body\">\n                <p className=\"block\" data-cy=\"modal-title\">\n                  {currTodo.title}\n                </p>\n\n                <p className=\"block\" data-cy=\"modal-user\">\n                  {currTodo.completed\n                    ? <strong className=\"has-text-success\">Done</strong>\n                    : <strong className=\"has-text-danger\">Planned</strong>}\n                  {' by '}\n\n                  {user && (\n                    <a href={`mailto:${user.email}`}>\n                      {user.name}\n                    </a>\n                  )}\n                </p>\n              </div>\n            </div>\n          )}\n        </div>\n      ) : <></>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { RootState } from './app/store';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\nimport { todosActions } from './features/todos';\nimport { loaderActions } from './features/loading';\n\nexport const App: React.FC = () => {\n  const dispatch = useDispatch();\n  const currTodo = useSelector((state: RootState) => state.currentTodo);\n  const loading = useSelector((state: RootState) => state.loading);\n\n  useEffect(() => {\n    dispatch(loaderActions.setLoading());\n    getTodos()\n      .then((todos: Todo[]) => dispatch(todosActions.setTodo(todos)))\n      .finally(() => dispatch(loaderActions.removeLoading()));\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {loading\n                ? <Loader />\n                : <TodoList />}\n            </div>\n          </div>\n        </div>\n      </div>\n      {currTodo && <TodoModal />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}